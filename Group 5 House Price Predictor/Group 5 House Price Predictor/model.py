# -*- coding: utf-8 -*-
"""IBM Proj 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19qIj_AtL4rJdUEgFZMFZX-9bG7iKTjhW
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

import matplotlib.pyplot  as plt
import seaborn as sns
import pickle
# %matplotlib inline

dataset = pd.read_csv('data.csv')
dataset.info()

dataset.shape

dataset.head()

dataset.drop(['date'], axis = 1, inplace = True)
dataset.head()

dataset.country.value_counts()

dataset.drop(['country'], axis = 1, inplace = True)
dataset.head()

dataset.drop(['street', 'city'], axis = 1, inplace = True)
dataset.head()

dataset.isnull().sum()

a4_dims = (10, 8)
fig, ax = plt.subplots(figsize=a4_dims)
cor = dataset.corr()
sns.heatmap(cor, annot = True, cmap="YlGnBu")

a4_dims = (15, 5)
fig, ax = plt.subplots(figsize=a4_dims)
sns.barplot(x = dataset.bedrooms, y = dataset.price)

dataset.groupby('bedrooms').price.agg([len, min, max])

df = dataset[(dataset.bedrooms > 0) & (dataset.bedrooms < 9)].copy()
df

df.shape

df.statezip.value_counts()

a4_dims = (5, 18)
fig, ax = plt.subplots(figsize=a4_dims)
sns.barplot(ax = ax, x = df.price, y = df.statezip)

a4_dims = (15, 8)
fig, ax = plt.subplots(figsize=a4_dims)
sns.distplot(a = df.price, bins = 1000, color = 'r', ax = ax)

df.price.agg([min, max])

len(df[(df.price == 0)])

# code
df = df[df.price!= 0]
print(df.price)

df.shape
df

a4_dims = (15, 5)
fig, ax = plt.subplots(figsize=a4_dims)
sns.barplot(x = df.bathrooms, y = df.price)

# zero_price = df[(df.price == 0)].copy()
# zero_price.shape

# zero_price.head()

# sns.distplot(zero_price.sqft_living)

# zero_price.agg([min, max, 'mean', 'median'])

# sim_from_ori = df[(df.bedrooms == 4) & (df.bathrooms > 1) & (df.bathrooms < 4) & (df.sqft_living > 2500) & (df.sqft_living < 3000) & (df.floors < 3) & (df.yr_built < 1970)].copy()

# sim_from_ori.shape

# sim_from_ori.head()

# sim_from_ori.price.mean()

# yr_sqft = df[(df.sqft_living > 2499) & (df.sqft_living < 2900)].copy()
# yr_price_avg = yr_sqft.groupby('yr_built').price.agg('mean')

# plt.plot(yr_price_avg)

df.price.replace(to_replace = 0, value = 735000, inplace = True)
len(df[(df.price == 0)])

df.head()

df.drop(['sqft_above'], axis = 1, inplace = True)
df.shape

df = df.reset_index()
df.info()

from sklearn import preprocessing
le = preprocessing.LabelEncoder()

df['statezip_encoded'] = le.fit_transform(df.statezip)
df

# My stuff

df.statezip_encoded.unique()
print(pd.unique(df['statezip']))

"""df1 = df.iloc[:,-2:]
df1
grouped=df1.groupby('statezip_encoded')
grouped.groups"""

gk.groups
Dict = {}
"""for group,name in gk:
   print (group)
   print (name)"""

df.drop(['statezip'], axis = 1, inplace = True)
df.head()

df.statezip_encoded.value_counts()



from sklearn.preprocessing import OneHotEncoder
ohc = OneHotEncoder()

ohc_df = pd.DataFrame(ohc.fit_transform(df[['statezip_encoded']]).toarray())
# ohc_df = ohc_df.astype(int)
ohc_df.head()

df = df.join(ohc_df)
df.head()

df.tail()

df.drop(['statezip_encoded'], axis = 1, inplace = True)

df.info

df.shape

X = df.iloc[:, 2:]
X.shape

y = df.price

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=43)

# print(len(X_train) / len(df))

X_test

X_train

print(len(X_train))
# print(len(X_val))
# print(X_val)

print(len(X_train))

from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()

lin_reg.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error
y_pred = lin_reg.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
rmse

lin_reg.score(X_train, y_train)
from sklearn.metrics import r2_score
r = r2_score(y_test, y_pred)
r

from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, y_pred))  
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

y_test.head(10)

y_pred

a = np.array([3.0,1.50,1340,7912,1.5,0,0,3,0,1955,2005,"WA 98133"])

# 313000.0	3.0	1.50	1340	7912	1.5	0	0	3	0	1955	2005

val = a[-1]
print(val)
l = le.classes_

for i in range(len(l)):
  if (l[i]==val):
    n = i

print(n)

z = np.zeros(77)

z[n] = 1
print(z)

print(a)
a = np.delete(a, -1)
print(a)
a.shape

b = np.concatenate((a,z), axis=0)
b.shape

c = np.array([b])
# c = np.concatenate((c,b))
#print(c.shape)
c.reshape((-1,1))
c = np.asarray(c, dtype='float64')
pred1 = lin_reg.predict(c)
pred1[0]

# Saving model to disk
pickle.dump(lin_reg, open('model.pkl','wb'))